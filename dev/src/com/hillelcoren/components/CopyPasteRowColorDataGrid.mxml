<?xml version="1.0" encoding="utf-8"?>
<local:RowColorDataGrid
	xmlns="com.m5net.components.dataGrid.*" 
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:local="local.*"
	initialize="init()">	

	<!-- This component is a slightly improved version of the following solution http://mannu.livejournal.com/348299.html -->

	<mx:Script>
		<![CDATA[
			import mx.managers.FocusManager;
			import mx.collections.ArrayCollection;
			import mx.utils.ObjectUtil;
			import mx.controls.TextArea;
			import mx.core.UIComponent;
			import mx.controls.dataGridClasses.DataGridColumn;
			import flash.events.KeyboardEvent;
			import com.hillelcoren.utils.DataGridUtils;
			
			private var _textArea:TextArea;
			
			private var _pasteFunction:Function;
			private var _pasteEnabled:Boolean;
			
			private var _contextMenu:ContextMenu;
			private var _copyMenuItem:ContextMenuItem;						
			
			private function init():void
			{
				addEventListener( Event.CHANGE, handleChange );
				addEventListener( MouseEvent.CLICK, handleClick );
				
				systemManager.addEventListener( KeyboardEvent.KEY_DOWN, handleKeyPressed );
				systemManager.addEventListener( KeyboardEvent.KEY_UP, handleKeyReleased );
			
				// note: the label can not be "Copy" (if it is, the menu item won't appear)
				_copyMenuItem = new ContextMenuItem( "Copiar item" );
				_copyMenuItem.addEventListener( ContextMenuEvent.MENU_ITEM_SELECT, handleCopySelect );
				
				_contextMenu = new ContextMenu();
				_contextMenu.hideBuiltInItems();
				_contextMenu.customItems = [ _copyMenuItem ];
				
				this.contextMenu = _contextMenu;										
			}
			
			private function handleChange( event:Event ):void
			{
				_copyMenuItem.caption = selectedItems.length > 1 ? "Copiar items" : "Copiar item";
			}
			
			private function handleCopySelect( event:Event ):void
			{
				System.setClipboard( getTextFromItems() );
			}
			
			public function set pasteFunction( value:Function ):void
			{
				_pasteFunction = value;
			}
			
			public function set pasteEnabled( value:Boolean ):void
			{
				_pasteEnabled = value;
			}
			
			private function handleClick( event:Event ):void
			{
				setFocus();
				drawFocus( true );
			}
			
			private function handleKeyPressed( event:KeyboardEvent ):void
			{
				if (event.target != this)
				{
					return;
				}
				
				// if we're currently editing the grid then we'll disable the copy/paste feature
				// so the profile is able to paste into the edited cell
				if (itemEditorInstance != null)
				{
					return;
				}
				
				// there's a strange bug that sometimes the ctrlkey appears as the alt
				// key, there shouldn't be a problem just watching for both
				if ((event.ctrlKey || event.altKey) && event.charCode == 0 && !_textArea)
				{
					// Add an invisible TextField object to the DataGrid
					_textArea = new TextArea();
					_textArea.visible = false;
					_textArea.height = this.height;
					_textArea.width = this.width;
					
					// Populate the TextField with selected data in TSV format
					_textArea.text = getTextFromItems();
					_textArea.setSelection( 0, _textArea.text.length - 1 );
					
					// Listen for textInput event
					_textArea.addEventListener( TextEvent.TEXT_INPUT, handleTextPasted, false, 0, true );
					
					// Set player-level focus to the TextField
					addChild( _textArea );
					
					_textArea.setFocus();
				}				
			}

			private function handleKeyReleased( event:KeyboardEvent ):void
			{
				if (!event.ctrlKey && _textArea)
				{
					var keepFocus:Boolean;
					
					if (focusManager && focusManager.getFocus() == _textArea)
					{
						keepFocus = true;
					}
					
					removeChild( _textArea );
					_textArea = null;
					
					if (keepFocus)
					{
						setFocus();
					}
					
					event.stopImmediatePropagation();	
				}							
			}

			protected function handleTextPasted( event:TextEvent ):void
			{
				if (!_textArea)
				{
					return;
				}
				
				if (!_pasteEnabled && _pasteFunction == null)
				{
					return;
				}
				
				if (_pasteFunction != null)
				{
					_pasteFunction( event );
				}
				else
				{
					// Extract values from TSV format and populate the DataGrid
					var items:Array = DataGridUtils.getItemsFromText( event.text );
				
					for each (var item:Object in items)
					{
						dataProvider.addItem( item );
					}
				}
			}
			
			public function getTextFromItems():String
			{
				return DataGridUtils.copyData( this, DataGridUtils.TYPE_TSV, DataGridUtils.EXPORT_SELECTED );
			}
	
		]]>
	</mx:Script>

</local:RowColorDataGrid>